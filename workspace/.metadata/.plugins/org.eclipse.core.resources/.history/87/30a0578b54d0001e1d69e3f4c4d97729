package test.generics;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class TestGenerics {

	public static void main(String[] args) {
		// 컬렉션 클래스들은 여러 종류의 클래스 객체들을 저장할 수 있다.
		List list = new ArrayList();
		
		list.add(new String("java"));
		list.add(new Book("자바 완성","홍길동"));
		list.add(new Date());
		
		System.out.println(list);  // 저장 순서대로 저장된 것 확인

		//저장 후에 하나씩 꺼내서 사용하려고 할 때, 기본적으로 Object 타입으로 추출됨
		for(Object obj :list) {
			//Object 타입의 레퍼런스로는 Object 클래스가 가진 메소드나 필드만 처리할 수 있음
			//toString(), equals(), clone(), hashCode() 메소드만 사용할 수 있는 상태임
			//후손클래스들이 오버라이딩한 경우에는 후손쪽의 오버라이딩된 부모메소드가 자동 연결되면서 실행하게 됨
			System.out.println(obj/*.toString()*/);
		}		
		for(Object obj :list) {
			//Object 타입의 레퍼런스로는 Object 클래스가 가진 메소드나 필드만 처리할 수 있음
			//toString(), equals(), clone(), hashCode() 메소드만 사용할 수 있는 상태임
			//후손클래스들이 오버라이딩한 경우에는 후손쪽의 오버라이딩된 부모메소드가 자동 연결되면서 실행하게 됨
			
			if(obj instanceof String||obj instanceof Date) {System.out.println(obj);}
			else if (obj instanceof Book)
			{Book bk = (Book)obj}
		}
		
	}

}

class Book {
	private String title;
	private String author;
	
	public Book() {}

	public Book(String title, String author) {
		super();
		this.title = title;
		this.author = author;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Override
	public String toString() {
		return "Book [title=" + title + ", author=" + author + "]";
	}
	
}











